# -*- coding: utf-8 -*-
"""
Author: Usama Yasir Khan
Project: KISTLER FAAM Machine GUI for Data Extraction

Description:
This project creates a GUI tool that allows users to extract relevant data from multiple CSV files generated by KISTLER FAAM machines.
Users can filter the data based on batch information, timestamps, and file contents. The extracted data is displayed in tables and visualized 
with graphs. The final output, including the graphs, is saved as an Excel file.

Modules used:
- pandas
- tkinter
- glob
- os
- datetime
- plotnine
- openpyxl
- random
- time
"""

import pandas as pd
import datetime
import os
import time
from datetime import datetime
import glob
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkinter import *
from tkinter.filedialog import askdirectory
import random
from plotnine import ggplot, aes, geom_boxplot, geom_histogram, theme_minimal, labs, geom_jitter, facet_wrap
from plotnine import element_text
import openpyxl

def get_csv(batchFolder, fResult, Rselection, fselection, sTime, eTime):
    csv_list = []
    range_start = time.mktime(datetime.strptime(sTime, '%Y-%m-%d_%H').timetuple())
    range_end = time.mktime(datetime.strptime(eTime, '%Y-%m-%d_%H').timetuple())

    for path, dirs, files in os.walk(batchFolder):
        for dir in dirs:
            new_path = os.path.join(path, dir)
            foldername = os.path.basename(os.path.normpath(new_path))
            foldertime = time.mktime(datetime.strptime(foldername, '%Y-%m-%d_%H').timetuple())
            if range_start <= foldertime <= range_end:
                targetFolder = os.path.join(batchFolder, new_path)
                if fResult == 1:
                    csv_files = glob.glob(os.path.join(targetFolder, "*_OK.csv"))
                    if Rselection == 1 and int(fselection) <= len(csv_files):
                        csv_files = random.sample(csv_files, int(fselection))
                elif fResult == 2:
                    csv_files = glob.glob(os.path.join(targetFolder, "*_NOK.csv"))
                elif fResult == 3:
                    csv_files = glob.glob(os.path.join(targetFolder, "*.csv"))
                    if Rselection == 1 and int(fselection) <= len(csv_files):
                        csv_files = random.sample(csv_files, int(fselection))
                csv_list.extend(csv_files)
    return csv_list

def get_Data(file, batchNo):
    df = pd.read_csv(file, header=None, sep=";")
    filename = df[0][1].split(',')[1]
    final_result = df[0][9].split(',')[1]
    Timestamp = df[0][6].split(',')[1] + " " + df[0][7].split(',')[1]
    Timestamp = datetime.strptime(Timestamp, '%Y/%m/%d %H:%M:%S')
    EO_01 = df[0][27].split(',')[1]
    EO_02 = df[0][28].split(',')[1]
    EO_03 = df[0][29].split(',')[1]
    EO_05 = df[0][31].split(',')[1]
    EO_07 = df[0][33].split(',')[1]
    Cal_01 = df[0][27].split(',')[12]
    Cal_02 = df[0][28].split(',')[12]
    Cal_07 = df[0][33].split(',')[12]

    newLine = [batchNo, filename, final_result, Timestamp, EO_01, EO_02, EO_03, EO_05, EO_07, Cal_01, Cal_02, Cal_07]
    return newLine

def plot_graphs(df, targetFolder):
    print('Generating graphs...')

    # Sensor Value Distribution Plot
    dist_plot = (
        ggplot(df, aes(x='SensorValue', fill='Sensor')) +
        geom_histogram(bins=30, alpha=0.7) +
        theme_minimal() +
        labs(title='Sensor Value Distribution', x='Sensor Value', y='Count') +
        facet_wrap('~Sensor', scales='free') +
        theme(subplots_adjust={'wspace': 0.25}, legend_position='none', plot_title=element_text(size=14, weight='bold'))
    )
    dist_plot.save(os.path.join(targetFolder, "sensor_value_distribution.png"))
    print("Sensor value distribution plot saved.")

    # Cycle Time Analysis Plot
    df['CycleTime'] = df.groupby('BatchNo')['Timestamp'].diff().dt.total_seconds() / 60  # Convert cycle time to minutes
    cycle_time_df = df.dropna(subset=['CycleTime'])

    cycle_time_plot = (
        ggplot(cycle_time_df, aes(x='BatchNo', y='CycleTime', color='Final_Result')) +
        geom_boxplot(outlier_shape='x') +
        geom_jitter(width=0.2, alpha=0.5) +
        theme_minimal() +
        labs(title='Cycle Time Analysis Across Batches', x='Batch Number', y='Cycle Time (minutes)') +
        theme(axis_text_x=element_text(rotation=90, hjust=1), plot_title=element_text(size=14, weight='bold'))
    )
    cycle_time_plot.save(os.path.join(targetFolder, "cycle_time_analysis.png"))
    print("Cycle time analysis plot saved.")

def Draw(df, TimeInterval, targetFolder):
    # Organize the Data
    df['Year'] = pd.DatetimeIndex(df.Timestamp).year
    df['Month'] = pd.DatetimeIndex(df.Timestamp).month
    df['Date'] = pd.DatetimeIndex(df.Timestamp).day
    df['Hour'] = pd.DatetimeIndex(df.Timestamp).hour
    df = df.set_index(['BatchNo', 'Filename', 'Final_Result', 'Timestamp', 'EO-01', 'EO-02', 'EO-03', 'EO-05', 'EO-07', 'Year', 'Month', 'Date', 'Hour']).stack().reset_index().rename({'level_13': 'Sensor', 0: 'SensorValue'}, axis=1)

    # Call plot_graphs to generate and save plots
    plot_graphs(df, targetFolder)

def createInterface():
    root = Tk()
    root.title("KISTLER Extract Files")

    mainframe = ttk.Frame(root, padding="3 3 12 12")
    mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
    root.columnconfigure(0, weight=1)
    root.rowconfigure(0, weight=1)

    Machine = IntVar()
    ttk.Label(mainframe, text="1. Machine").grid(column=1, row=1, sticky=W)
    ttk.Radiobutton(mainframe, text="FAAM_1", variable=Machine, value=1).grid(column=2, row=1, sticky=(W, E), padx=10, pady=10)
    ttk.Radiobutton(mainframe, text="FAAM_2", variable=Machine, value=2).grid(column=3, row=1, sticky=(W, E), padx=10, pady=10)

    so_no = StringVar()
    ttk.Label(mainframe, text="2. SO No (e.g. 111200079020)").grid(column=1, row=5, sticky=W)
    so_no_entry = ttk.Entry(mainframe, width=10, textvariable=so_no)
    so_no_entry.grid(column=3, row=5, sticky=(W, E), padx=10, pady=10)

    def run_process():
        # Dummy data and target folder for illustration
        targetFolder = "results"
        if not os.path.exists(targetFolder):
            os.makedirs(targetFolder)
        
        # Example DataFrame for demonstration (replace with actual data extraction logic)
        df = pd.DataFrame({
            'BatchNo': ['B1', 'B2', 'B3', 'B4'],
            'Filename': ['file1', 'file2', 'file3', 'file4'],
            'Final_Result': ['OK', 'NOK', 'OK', 'NOK'],
            'Timestamp': pd.to_datetime(['2023-01-01 12:00', '2023-01-01 12:10', '2023-01-01 12:20', '2023-01-01 12:30']),
            'Sensor': ['EO-01', 'EO-02', 'EO-03', 'EO-05'],
            'SensorValue': [98, 120, 140, 130]
        })
        
        Draw(df, None, targetFolder)
        messagebox.showinfo("Process Complete", "Data extraction and plotting completed.")

    ttk.Button(mainframe, text="Run", command=run_process).grid(column=1, row=14, sticky=E, padx=10, pady=10)

    root.mainloop()

if __name__ == "__main__":
    main()
